var documenterSearchIndex = {"docs":
[{"location":"library/#Library","page":"library","title":"Library","text":"","category":"section"},{"location":"library/","page":"library","title":"library","text":"List of all types and methods in the library","category":"page"},{"location":"library/","page":"library","title":"library","text":"CurrentModule = ObjectivePaths","category":"page"},{"location":"library/","page":"library","title":"library","text":"Pages   = [\"library.md\"]","category":"page"},{"location":"library/","page":"library","title":"library","text":"Modules = [ObjectivePaths]","category":"page"},{"location":"library/#ObjectivePaths.File","page":"library","title":"ObjectivePaths.File","text":"File\n\nStores the path to a (possibly not-existing) file\n\n\n\n\n\n","category":"type"},{"location":"library/#ObjectivePaths.Folder","page":"library","title":"ObjectivePaths.Folder","text":"Folder\n\nStores the path to a (possibly not-existing) folder\n\n\n\n\n\n","category":"type"},{"location":"library/#Base.:--Tuple{ObjectivePaths.AbstractPath, Int64}","page":"library","title":"Base.:-","text":"-(path::AbstractPath, val::Int)\n\nMove val levels up in the paths hierarchy.\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.:/-Tuple{ObjectivePaths.AbstractPath, ObjectivePaths.AbstractPath}","page":"library","title":"Base.:/","text":"/(p1::AbstractPath, p2::AbstractPath)\n\nConcatenate paths.\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.parent-Tuple{ObjectivePaths.AbstractPath}","page":"library","title":"Base.parent","text":"parent(path::AbstractPath)\n\nGet the folder one level up in the hierarchy of a path.\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.split-Tuple{ObjectivePaths.AbstractPath}","page":"library","title":"Base.split","text":"split(path::AbstractPath)::Tuple{AbstractPath,String}\n\nSplit a path into its base and its name.\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths._tree-Tuple{String}","page":"library","title":"ObjectivePaths._tree","text":"_tree(dir::String)::OrderedDict\n\nConstruct a dictionary storing files/subsfolders hierarchy form a directory.\n\nCalls itself recursively to handle subfolders.\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.base-Tuple{ObjectivePaths.AbstractPath}","page":"library","title":"ObjectivePaths.base","text":"base(p::AbstractPath)\n\nGet the base (dirname) of a path.\n\nSimilar to dirname(p) but returns a Folder object instead of a String.\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.exists-Tuple{ObjectivePaths.AbstractPath}","page":"library","title":"ObjectivePaths.exists","text":"exists(path::AbstractPath)\n\nCheck if an object exists at the target path\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.extension-Tuple{File}","page":"library","title":"ObjectivePaths.extension","text":"f::File)\n\nGet the extension of a file. \n\nReturns an empty string for a folder.\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.files-Tuple{Folder}","page":"library","title":"ObjectivePaths.files","text":"files(f::Folder)::Vector{File}\n\nGet all files in a folder (without recursion)\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.get_file_format-Tuple{Int64}","page":"library","title":"ObjectivePaths.get_file_format","text":"getfileformat(nbytes; suffix=\"B\") Return a string with formatted file size.\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.highlight_path-Tuple{String}","page":"library","title":"ObjectivePaths.highlight_path","text":"highlight_path(path::String)\n\nAdd Term's markup syntax to highlights parts of a path.\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.info-Tuple{Folder}","page":"library","title":"ObjectivePaths.info","text":"info(f::Folder)\n\nCreate a detailed visualization of a folder's content\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.name-Tuple{ObjectivePaths.AbstractPath}","page":"library","title":"ObjectivePaths.name","text":"name(dir::AbstractPath)\n\nGet name (last part) of a path.\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.nfiles-Tuple{Folder}","page":"library","title":"ObjectivePaths.nfiles","text":"nfiles(f::Folder)\n\nGet the number of files in a folder\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.path-Tuple{String}","page":"library","title":"ObjectivePaths.path","text":"path(p::String)\n\nCreate a Folder or a File type from a string with a path.\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.repr_info","page":"library","title":"ObjectivePaths.repr_info","text":"repr_info\n\nCreate a compact textual representation of an AbstractPath\n\n\n\n\n\n","category":"function"},{"location":"library/#ObjectivePaths.subdirs-Tuple{Folder}","page":"library","title":"ObjectivePaths.subdirs","text":"subdirs(f::Folder)::Vector{Folder}\n\nGet all subfolders in a folder (without recursion)\n\n\n\n\n\n","category":"method"},{"location":"library/#ObjectivePaths.tree-Tuple{String}","page":"library","title":"ObjectivePaths.tree","text":"tree(dir::String)::Tree\n\nConstruct a term Tree with a folder's content.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ObjectivePaths","category":"page"},{"location":"#ObjectivePaths","page":"Home","title":"ObjectivePaths","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ObjectivePaths is a small Julia library aiming to make a few operations around handling paths to folders and files easier. It's a small wrapper around Base's file system applying some ideas from Python's pathlib library, in a Julian way.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Installation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add ObjectivePaths","category":"page"},{"location":"#AbstractPath,-Folder-and-File","page":"Home","title":"AbstractPath, Folder & File","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The first thing you need is to craete pointers to paths (folders/files). This is done by calling the path function on a string with a filepath:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ObjectivePaths\n\ncurrent_folder = pwd()  # path to current folder\npath(current_folder)    # create a Folder type","category":"page"},{"location":"","page":"Home","title":"Home","text":"(note: the display in the REPR will look a bit different in your terminal - give it a go by copy-pasting the code above and running it in the REPL).","category":"page"},{"location":"","page":"Home","title":"Home","text":"As you can see, calling path on a string pointing to a file create a Folder type. If, instead, you are using a file:","category":"page"},{"location":"","page":"Home","title":"Home","text":"parent_content = readdir(parent(path(current_folder)); join=true) # get content of parent folder\nfiles_paths = filter(isfile, parent_content)                     # get only files\npath(files_paths[1])  # pointer to a file","category":"page"},{"location":"","page":"Home","title":"Home","text":"this creates a File. These are the two subtypes of AbstractPath. There's a few methods for AbstractPaths which can make your life easier, starting from printing nicely formatted info as shown above. But you can do more","category":"page"},{"location":"","page":"Home","title":"Home","text":"fld = path(current_folder)  # Folder object\nprintln(fld)\n\nexists(fld) |> println  # true if folder exists\nnfiles(fld) |> println  # number of files in folder\nname(fld) |> println    # name of folder (last part of the path)\n\n# also mose Base methods are available for AbstractPaths\nsplit(fld) |> println   # split path into base/name","category":"page"},{"location":"#Folder-specific-methods","page":"Home","title":"Folder-specific methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"With Folder objects you can do a few more, starting from viewing more info (or use tree to just print out the folder structure):","category":"page"},{"location":"","page":"Home","title":"Home","text":"info(fld - 1)  # -1 moves us one level up the hierarchy","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or get the files/subfolders in your folder","category":"page"},{"location":"","page":"Home","title":"Home","text":"println(\"Subfolders in folder:\")\nsubdirs(fld-1) |> print","category":"page"},{"location":"","page":"Home","title":"Home","text":"println(\"Files in folder's parent:\")\nfiles(parent(fld)) |> print  # parent goes up one level","category":"page"},{"location":"#Manipulating-paths","page":"Home","title":"Manipulating paths","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"One of the things that can be a bit annoying is manipulating paths. Normally, you'd create a String with the path you need, or you combine things like splitpath and joinpath to create a path. Not fun.  We can make things a bit easier.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# say you want to get access to a folder 3 levels up the current one\nfld - 3  # done","category":"page"},{"location":"","page":"Home","title":"Home","text":"Yep, that's it. But what if you want to create a new folder in there? Need to split, join paths or something? Nope","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nnewfld = (fld - 3) / \"new_folder_that_doesnt_exist_yet\"  # point to new folder\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"and then you can use mkdir or mkpath as you would normally, neat.","category":"page"},{"location":"#Coda","page":"Home","title":"Coda","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"That's it for now. But if you have issues, or questions or ideas for new improvements, get in touch on Github!","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also, please consider supporting my work if you find it valuable!","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: ko-fi)","category":"page"}]
}
